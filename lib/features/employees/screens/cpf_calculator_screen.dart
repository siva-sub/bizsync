import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import '../services/singapore_cpf_service.dart';
import '../models/payroll_models.dart';

class CpfCalculatorScreen extends ConsumerStatefulWidget {
  const CpfCalculatorScreen({super.key});

  @override
  ConsumerState<CpfCalculatorScreen> createState() => _CpfCalculatorScreenState();
}

class _CpfCalculatorScreenState extends ConsumerState<CpfCalculatorScreen>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  final _formKey = GlobalKey<FormState>();

  // Form controllers
  final _ordinaryWageController = TextEditingController();
  final _additionalWageController = TextEditingController();
  final _existingCpfController = TextEditingController();

  // Form data
  DateTime _dateOfBirth = DateTime.now().subtract(const Duration(days: 365 * 30));
  DateTime _calculationDate = DateTime.now();
  String _residencyStatus = 'citizen';
  
  // Results
  CpfCalculationResult? _result;
  bool _isCalculating = false;

  final Map<String, String> _residencyOptions = {
    'citizen': 'Singapore Citizen',
    'pr': 'Permanent Resident',
    'pr_first_2_years': 'New PR (First 2 Years)',
    'foreigner': 'Foreigner',
  };

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    _ordinaryWageController.text = '5000';
    _additionalWageController.text = '0';
    _existingCpfController.text = '0';
  }

  @override
  void dispose() {
    _tabController.dispose();
    _ordinaryWageController.dispose();
    _additionalWageController.dispose();
    _existingCpfController.dispose();
    super.dispose();
  }

  Future<void> _calculateCpf() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isCalculating = true);

    try {
      await Future.delayed(const Duration(milliseconds: 300)); // Show loading

      final ordinaryWage = double.tryParse(_ordinaryWageController.text) ?? 0.0;
      final additionalWage = double.tryParse(_additionalWageController.text) ?? 0.0;
      final existingCpf = double.tryParse(_existingCpfController.text) ?? 0.0;

      final result = SingaporeCpfService.calculateCpfContributions(
        dateOfBirth: _dateOfBirth,
        residencyStatus: _residencyStatus,
        ordinaryWage: ordinaryWage,
        additionalWage: additionalWage,
        calculationDate: _calculationDate,
        existingCpfForYear: existingCpf,
      );

      setState(() {
        _result = result;
        _isCalculating = false;
      });

      // Switch to results tab
      _tabController.animateTo(1);
    } catch (e) {
      setState(() => _isCalculating = false);
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error calculating CPF: $e')),
        );
      }
    }
  }

  void _resetForm() {
    setState(() {
      _result = null;
      _dateOfBirth = DateTime.now().subtract(const Duration(days: 365 * 30));
      _calculationDate = DateTime.now();
      _residencyStatus = 'citizen';
    });
    _ordinaryWageController.text = '5000';
    _additionalWageController.text = '0';
    _existingCpfController.text = '0';
    _tabController.animateTo(0);
  }

  void _copyResults() {
    if (_result == null) return;

    final summary = '''
CPF Calculation Results
======================
Ordinary Wage: S\$${_result!.ordinaryWage.toStringAsFixed(2)}
Additional Wage: S\$${_result!.additionalWage.toStringAsFixed(2)}

Employee Contribution: S\$${_result!.employeeContribution.toStringAsFixed(2)} (${(_result!.employeeRate * 100).toStringAsFixed(1)}%)
Employer Contribution: S\$${_result!.employerContribution.toStringAsFixed(2)} (${(_result!.employerRate * 100).toStringAsFixed(1)}%)
Total Contribution: S\$${_result!.totalContribution.toStringAsFixed(2)}

Account Allocation:
- Ordinary Account: S\$${_result!.breakdown.ordinaryAccount.toStringAsFixed(2)}
- Special Account: S\$${_result!.breakdown.specialAccount.toStringAsFixed(2)}
- Medisave Account: S\$${_result!.breakdown.medisaveAccount.toStringAsFixed(2)}

Calculated on: ${_calculationDate.day}/${_calculationDate.month}/${_calculationDate.year}
Generated by BizSync CPF Calculator
''';

    Clipboard.setData(ClipboardData(text: summary));
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Results copied to clipboard')),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;

    return Scaffold(
      appBar: AppBar(
        title: const Text('CPF Calculator'),
        backgroundColor: colorScheme.inversePrimary,
        actions: [
          if (_result != null) ...[
            IconButton(
              icon: const Icon(Icons.copy),
              onPressed: _copyResults,
              tooltip: 'Copy Results',
            ),
            IconButton(
              icon: const Icon(Icons.refresh),
              onPressed: _resetForm,
              tooltip: 'Reset',
            ),
          ],
        ],
        bottom: TabBar(
          controller: _tabController,
          tabs: const [
            Tab(icon: Icon(Icons.calculate), text: 'Calculator'),
            Tab(icon: Icon(Icons.bar_chart), text: 'Results'),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildCalculatorTab(),
          _buildResultsTab(),
        ],
      ),
      floatingActionButton: _tabController.index == 0
          ? FloatingActionButton.extended(
              onPressed: _isCalculating ? null : _calculateCpf,
              icon: _isCalculating
                  ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(strokeWidth: 2),
                    )
                  : const Icon(Icons.calculate),
              label: Text(_isCalculating ? 'Calculating...' : 'Calculate CPF'),
            )
          : null,
    );
  }

  Widget _buildCalculatorTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Form(
        key: _formKey,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Header Card
            Card(
              color: Theme.of(context).colorScheme.primaryContainer,
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(
                          Icons.calculate,
                          color: Theme.of(context).colorScheme.primary,
                        ),
                        const SizedBox(width: 8),
                        Text(
                          'Singapore CPF Calculator',
                          style: Theme.of(context).textTheme.titleLarge?.copyWith(
                            color: Theme.of(context).colorScheme.primary,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'Calculate CPF contributions based on 2024 rates. Enter employee details below.',
                      style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                        color: Theme.of(context).colorScheme.onPrimaryContainer,
                      ),
                    ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 16),

            // Employee Information
            _buildSectionCard(
              'Employee Information',
              Icons.person,
              [
                // Date of Birth
                ListTile(
                  title: const Text('Date of Birth'),
                  subtitle: Text('${_dateOfBirth.day}/${_dateOfBirth.month}/${_dateOfBirth.year}'),
                  leading: const Icon(Icons.cake),
                  trailing: const Icon(Icons.calendar_today),
                  onTap: () async {
                    final picked = await showDatePicker(
                      context: context,
                      initialDate: _dateOfBirth,
                      firstDate: DateTime(1950),
                      lastDate: DateTime.now(),
                      helpText: 'Select date of birth',
                    );
                    if (picked != null) {
                      setState(() => _dateOfBirth = picked);
                    }
                  },
                ),
                const Divider(),

                // Residency Status
                DropdownButtonFormField<String>(
                  value: _residencyStatus,
                  decoration: const InputDecoration(
                    labelText: 'Residency Status',
                    prefixIcon: Icon(Icons.flag),
                    border: OutlineInputBorder(),
                  ),
                  items: _residencyOptions.entries
                      .map((entry) => DropdownMenuItem(
                            value: entry.key,
                            child: Text(entry.value),
                          ))
                      .toList(),
                  onChanged: (value) {
                    if (value != null) {
                      setState(() => _residencyStatus = value);
                    }
                  },
                ),
                const SizedBox(height: 8),
                if (_residencyStatus == 'pr_first_2_years')
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.blue.withValues(alpha: 0.1),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Row(
                      children: [
                        Icon(Icons.info, color: Colors.blue[600], size: 16),
                        const SizedBox(width: 8),
                        Expanded(
                          child: Text(
                            'Special rates apply for new PRs in their first 2 years',
                            style: TextStyle(
                              fontSize: 12,
                              color: Colors.blue[600],
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                if (_residencyStatus == 'foreigner')
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.orange.withValues(alpha: 0.1),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Row(
                      children: [
                        Icon(Icons.warning, color: Colors.orange[600], size: 16),
                        const SizedBox(width: 8),
                        Expanded(
                          child: Text(
                            'Foreigners are generally not eligible for CPF contributions',
                            style: TextStyle(
                              fontSize: 12,
                              color: Colors.orange[600],
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
              ],
            ),

            const SizedBox(height: 16),

            // Wage Information
            _buildSectionCard(
              'Wage Information',
              Icons.payments,
              [
                TextFormField(
                  controller: _ordinaryWageController,
                  decoration: const InputDecoration(
                    labelText: 'Ordinary Wage (Monthly)',
                    prefixText: 'S\$ ',
                    border: OutlineInputBorder(),
                    helperText: 'Basic salary, allowances, and overtime',
                  ),
                  keyboardType: TextInputType.number,
                  inputFormatters: [
                    FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*')),
                  ],
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter ordinary wage';
                    }
                    final amount = double.tryParse(value);
                    if (amount == null || amount < 0) {
                      return 'Please enter a valid amount';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),

                TextFormField(
                  controller: _additionalWageController,
                  decoration: const InputDecoration(
                    labelText: 'Additional Wage (Monthly)',
                    prefixText: 'S\$ ',
                    border: OutlineInputBorder(),
                    helperText: 'Bonus, commission, and other payments',
                  ),
                  keyboardType: TextInputType.number,
                  inputFormatters: [
                    FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*')),
                  ],
                  validator: (value) {
                    if (value != null && value.isNotEmpty) {
                      final amount = double.tryParse(value);
                      if (amount == null || amount < 0) {
                        return 'Please enter a valid amount';
                      }
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),

                TextFormField(
                  controller: _existingCpfController,
                  decoration: const InputDecoration(
                    labelText: 'Existing CPF This Year',
                    prefixText: 'S\$ ',
                    border: OutlineInputBorder(),
                    helperText: 'Total CPF contributions already made this year',
                  ),
                  keyboardType: TextInputType.number,
                  inputFormatters: [
                    FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*')),
                  ],
                  validator: (value) {
                    if (value != null && value.isNotEmpty) {
                      final amount = double.tryParse(value);
                      if (amount == null || amount < 0) {
                        return 'Please enter a valid amount';
                      }
                    }
                    return null;
                  },
                ),
              ],
            ),

            const SizedBox(height: 16),

            // Calculation Date
            _buildSectionCard(
              'Calculation Settings',
              Icons.settings,
              [
                ListTile(
                  title: const Text('Calculation Date'),
                  subtitle: Text('${_calculationDate.day}/${_calculationDate.month}/${_calculationDate.year}'),
                  leading: const Icon(Icons.today),
                  trailing: const Icon(Icons.calendar_month),
                  onTap: () async {
                    final picked = await showDatePicker(
                      context: context,
                      initialDate: _calculationDate,
                      firstDate: DateTime(2020),
                      lastDate: DateTime.now().add(const Duration(days: 365)),
                      helpText: 'Select calculation date',
                    );
                    if (picked != null) {
                      setState(() => _calculationDate = picked);
                    }
                  },
                ),
              ],
            ),

            const SizedBox(height: 80), // Space for FAB
          ],
        ),
      ),
    );
  }

  Widget _buildResultsTab() {
    if (_result == null) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.bar_chart_outlined, size: 64, color: Colors.grey),
            SizedBox(height: 16),
            Text(
              'No Results Yet',
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 8),
            Text(
              'Go to the Calculator tab and calculate CPF contributions',
              style: TextStyle(color: Colors.grey),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      );
    }

    final result = _result!;

    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Summary Card
          Card(
            color: result.isEligible
                ? Colors.green.withValues(alpha: 0.1)
                : Colors.red.withValues(alpha: 0.1),
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(
                        result.isEligible ? Icons.check_circle : Icons.cancel,
                        color: result.isEligible ? Colors.green : Colors.red,
                        size: 32,
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              result.isEligible
                                  ? 'CPF Contribution Calculated'
                                  : 'Not Eligible for CPF',
                              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                                color: result.isEligible ? Colors.green : Colors.red,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            Text(
                              result.reasoning,
                              style: const TextStyle(color: Colors.grey),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),

          if (result.isEligible) ...[
            const SizedBox(height: 16),

            // Contribution Summary
            _buildSectionCard(
              'Contribution Summary',
              Icons.payments,
              [
                _buildResultTile(
                  'Total Contribution',
                  'S\$${result.totalContribution.toStringAsFixed(2)}',
                  Icons.account_balance_wallet,
                  isHighlight: true,
                ),
                const Divider(),
                _buildResultTile(
                  'Employee Contribution',
                  'S\$${result.employeeContribution.toStringAsFixed(2)} (${(result.employeeRate * 100).toStringAsFixed(1)}%)',
                  Icons.person,
                ),
                _buildResultTile(
                  'Employer Contribution',
                  'S\$${result.employerContribution.toStringAsFixed(2)} (${(result.employerRate * 100).toStringAsFixed(1)}%)',
                  Icons.business,
                ),
              ],
            ),

            const SizedBox(height: 16),

            // Account Breakdown
            _buildSectionCard(
              'CPF Account Allocation',
              Icons.account_balance,
              [
                _buildResultTile(
                  'Ordinary Account (OA)',
                  'S\$${result.breakdown.ordinaryAccount.toStringAsFixed(2)}',
                  Icons.savings,
                  subtitle: 'Housing, investments, insurance',
                ),
                _buildResultTile(
                  'Special Account (SA)',
                  'S\$${result.breakdown.specialAccount.toStringAsFixed(2)}',
                  Icons.trending_up,
                  subtitle: 'Retirement, investments',
                ),
                _buildResultTile(
                  'Medisave Account (MA)',
                  'S\$${result.breakdown.medisaveAccount.toStringAsFixed(2)}',
                  Icons.local_hospital,
                  subtitle: 'Healthcare, medical insurance',
                ),
              ],
            ),

            const SizedBox(height: 16),

            // Wage Details
            _buildSectionCard(
              'Wage Breakdown',
              Icons.receipt_long,
              [
                _buildResultTile(
                  'Ordinary Wage',
                  'S\$${result.ordinaryWage.toStringAsFixed(2)}',
                  Icons.work,
                  subtitle: result.cappedOrdinaryWage != null &&
                          result.cappedOrdinaryWage! < result.ordinaryWage
                      ? 'Capped at S\$${result.cappedOrdinaryWage!.toStringAsFixed(2)}'
                      : null,
                ),
                if (result.additionalWage > 0)
                  _buildResultTile(
                    'Additional Wage',
                    'S\$${result.additionalWage.toStringAsFixed(2)}',
                    Icons.add,
                    subtitle: result.cappedAdditionalWage != null &&
                            result.cappedAdditionalWage! < result.additionalWage
                        ? 'Capped at S\$${result.cappedAdditionalWage!.toStringAsFixed(2)}'
                        : null,
                  ),
              ],
            ),

            if (result.additionalInfo != null) ...[
              const SizedBox(height: 16),

              // Additional Information
              _buildSectionCard(
                'Additional Information',
                Icons.info,
                [
                  if (result.additionalInfo!['age'] != null)
                    _buildResultTile(
                      'Employee Age',
                      '${result.additionalInfo!['age']} years',
                      Icons.cake,
                      subtitle: result.ageCategory.displayName,
                    ),
                  if (result.additionalInfo!['ow_ceiling_applied'] == true)
                    _buildResultTile(
                      'OW Ceiling Applied',
                      'Yes',
                      Icons.warning,
                      subtitle: 'Monthly OW ceiling of S\$6,000 applied',
                    ),
                  if (result.additionalInfo!['aw_ceiling_applied'] == true)
                    _buildResultTile(
                      'AW Ceiling Applied',
                      'Yes',
                      Icons.warning,
                      subtitle: 'Annual AW ceiling reached',
                    ),
                  if (result.additionalInfo!['remaining_aw_ceiling'] != null)
                    _buildResultTile(
                      'Remaining AW Ceiling',
                      'S\$${result.additionalInfo!['remaining_aw_ceiling'].toStringAsFixed(2)}',
                      Icons.trending_down,
                      subtitle: 'Available for rest of the year',
                    ),
                ],
              ),
            ],
          ],

          const SizedBox(height: 16),

          // Disclaimer
          Card(
            color: Colors.grey.withValues(alpha: 0.1),
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(Icons.info_outline, color: Colors.grey[600]),
                      const SizedBox(width: 8),
                      Text(
                        'Disclaimer',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: Colors.grey[600],
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'This calculator provides estimates based on 2024 CPF rates and is for reference only. '
                    'Please consult official CPF sources or qualified professionals for accurate calculations. '
                    'Rates and rules may change without notice.',
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSectionCard(String title, IconData icon, List<Widget> children) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(icon, size: 20),
                const SizedBox(width: 8),
                Text(
                  title,
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            ...children,
          ],
        ),
      ),
    );
  }

  Widget _buildResultTile(
    String label,
    String value,
    IconData icon, {
    String? subtitle,
    bool isHighlight = false,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        children: [
          Icon(
            icon,
            size: 20,
            color: isHighlight ? Colors.green : Colors.grey[600],
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  label,
                  style: TextStyle(
                    fontSize: 12,
                    fontWeight: FontWeight.w500,
                    color: Colors.grey[600],
                  ),
                ),
                Text(
                  value,
                  style: TextStyle(
                    fontSize: isHighlight ? 18 : 16,
                    fontWeight: isHighlight ? FontWeight.bold : FontWeight.w400,
                    color: isHighlight ? Colors.green : null,
                  ),
                ),
                if (subtitle != null)
                  Text(
                    subtitle,
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.grey[500],
                      fontStyle: FontStyle.italic,
                    ),
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}